# A controller for a filtration device.
#
# Written by Zappes
# CC BY 4.0 (https://creativecommons.org/licenses/by/4.0/)

alias filter d0
alias analyzer d1
alias led d2
alias display d3
alias analyzerMixture d4

define minMoles 10          # number of moles in the input required for filter activation

# set the value of the IC housing to one of these values to specify what the
# filter is supposed to filter!
define typeOxygen 1
define typeNitrogen 2
define typeCarbon 3
define typeNitrous 4
define typeHydrogen 5
define typePollutant 6

loop:
    jal updateDisplay       # display gas pressure
    jal checkFilters        # check filter status and set display color
    jal checkInput          # checks if the input actually contains the proper stuff
    yield                   # make sure to give other code a chance to execute
    j loop                  # start over

updateDisplay:
    bdns display udDone     # skip if no display is connected
    l r0 analyzer Pressure
    round r0 r0             # fractions look weird on the display
    s display Setting r0    
udDone:
    j ra                    # return to calling position

checkFilters:
    move r2 0               # r2 holds the number of expended filters
    ls r0 filter 0 Quantity
    ls r1 filter 1 Quantity
    brgtz r0 2              # if filter one is not spent, skip the next line
    add r2 r2 1             # increment number of spent filters
    brgtz r1 2              # if filter two is not spent, skip the next line
    add r2 r2 1             # increment number of spent filters

    brge r2 1 3             # if spent filters >= 1, skip two lines
    move r6 2               # set color to green
    j cfSetColor
    brge r2 2 3             # if spent filters >= 2, skip two lines
    move r6 5               # set color to yellow
    j cfSetColor
    move r6 4               # set color to red
cfSetColor:                 
    bdns display cfNoDisplay
    s display Color r6
cfNoDisplay:
    bdns led cfDone
    s led Color r6
cfDone:
    j ra                    # return to calling position

checkInput:
    l r2 db Setting

    # if the type is out of range, skip this thing
    beqz r2 ciOn
    bgt r2 6 ciOff

    l r0 analyzerMixture TotalMoles

    brgt r2 typeOxygen 3
    l r1 analyzerMixture RatioOxygen
    j ciGotRatio
    brgt r2 typeNitrogen 3
    l r1 analyzerMixture RatioNitrogen
    j ciGotRatio
    brgt r2 typeCarbon 3
    l r1 analyzerMixture RatioCarbonDioxide
    j ciGotRatio
    brgt r2 typeNitrous 3
    l r1 analyzerMixture RatioNitrousOxide
    j ciGotRatio
    brgt r2 typeHydrogen 3
    l r1 analyzerMixture RatioVolatiles
    j ciGotRatio
    brgt r2 typePollutant 2
    l r1 analyzerMixture RatioPollutant

ciGotRatio:
    mul r0 r0 r1            # r0: moles of proper stuff in the input
    bge r0 minMoles ciOn    # more moles than MIN_MOLES? then activate filter!
    blt r0 1 ciOff          # nothing left in the pipe? disable filter.
    j ciDone
ciOff:   
    s filter On 0
    j ciDone
ciOn:
    s filter On 1
ciDone:
    j ra